Converting Cloud9 sqlite3 to postgresql

Here are instructions for converting a Cloud9 Rails application from sqlite3 to postgresql. The main reason for this is the deployment of the app to Heroku, which requires a postgresql database.

After logging into Cloud9, create a new rails app. Cloud9 will provision and set up the server. By default, Cloud9 creates a role/user called ubuntu, which we will recall for later.

Once in the rails app, open up your gem file and replace gem 'sqlite3' with gem 'pg'.

Install the gem pg via command line: gem install pg
Via command line, run: bundle install and then bundle update

In the  Config folder, open database.yml
Copy/paste the below code, changing just the password to match the password for your database
default: &default
  adapter: postgresql
  encoding: SQL_ASCII
  host: localhost
  pool: 5
  username: ubuntu
  password: (yourpassword)

development:
  <<: *default
  database: app_development

test:
  <<: *default
  database: app_test

production:
  <<: *default
  database: app_production
Ctrl+s to save the file.

Remeber the default cloud9 user 'ubuntu'? Now we're going to create the username ubuntu in postgres
Start the postgresql server by running the following: sudo service postgresql start
Access the postgres terminal, run: sudo sudo -u postgres psql
Create the user: postgres=# CREATE USER ubuntu SUPERUSER PASSWORD 'yourpassword';
Passwords of 'ubuntu' should match in postgres and the database.yml file
Create a new database via: CREATE DATABASE “database_name”;
Run list command to verify the database is created using: \list
Your database will be first listed and postgres will be identified as the owner.
We will now set 'ubuntu' as the owner of the databases. 
Run this command for each database (should be 4 databases at minimum): ALTER DATABASE (db name) OWNER TO ubuntu;
If successful, you'll see a ALTER DATABASE message populate below the command you just ran
If not, ensure you have the ; at the end of the ALTER DATABASE command.
HINT: you can use the “up” arrow to populate the previous command.
Run this command to quit the postgres command line: \q

Now back at the terminal run: rake db:create
Run: rake db:migrate

Configuration of postgresql for Cloud9 IDE using Ruby on Rails is now complete. Have fun!